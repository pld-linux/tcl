diff -durN tcl8.3.4.orig/unix/tclUnixInit.c tcl8.3.4/unix/tclUnixInit.c
--- tcl8.3.4.orig/unix/tclUnixInit.c	Fri Aug 24 19:13:22 2001
+++ tcl8.3.4/unix/tclUnixInit.c	Sat Jan 11 12:39:18 2003
@@ -13,6 +13,7 @@
 #include "tclInt.h"
 #include "tclPort.h"
 #include <locale.h>
+#include <langinfo.h>
 #if defined(__FreeBSD__)
 #   include <floatingpoint.h>
 #endif
@@ -385,72 +386,37 @@
 TclpSetInitialEncodings()
 {
     CONST char *encoding;
-    int i;
+    char buf[129];
+    int i,j,r;
     Tcl_Obj *pathPtr;
-    char *langEnv;
-
-    /*
-     * Determine the current encoding from the LC_* or LANG environment
-     * variables.  We previously used setlocale() to determine the locale,
-     * but this does not work on some systems (e.g. Linux/i386 RH 5.0).
-     */
-
-    langEnv = getenv("LC_ALL");
-
-    if (langEnv == NULL || langEnv[0] == '\0') {
-	langEnv = getenv("LC_CTYPE");
-    }
-    if (langEnv == NULL || langEnv[0] == '\0') {
-	langEnv = getenv("LANG");
-    }
-    if (langEnv == NULL || langEnv[0] == '\0') {
-	langEnv = NULL;
-    }
-
-    encoding = NULL;
-    if (langEnv != NULL) {
-	for (i = 0; localeTable[i].lang != NULL; i++) {
-	    if (strcmp(localeTable[i].lang, langEnv) == 0) {
-		encoding = localeTable[i].encoding;
-		break;
-	    }
-	}
-	/*
-	 * There was no mapping in the locale table.  If there is an
-	 * encoding subfield, we can try to guess from that.
-	 */
-
-	if (encoding == NULL) {
-	    char *p;
-	    for (p = langEnv; *p != '\0'; p++) {
-		if (*p == '.') {
-		    p++;
-		    break;
-		}
-	    }
-	    if (*p != '\0') {
-		Tcl_DString ds;
-		Tcl_DStringInit(&ds);
-		Tcl_DStringAppend(&ds, p, -1);
 
-		encoding = Tcl_DStringValue(&ds);
-		Tcl_UtfToLower(Tcl_DStringValue(&ds));
-		if (Tcl_SetSystemEncoding(NULL, encoding) == TCL_OK) {
-		    Tcl_DStringFree(&ds);
-		    goto resetPath;
-		}
-		Tcl_DStringFree(&ds);
-		encoding = NULL;
+ 
+    /* read the encoding from locale settings */
+    setlocale(LC_CTYPE, "");
+    encoding=nl_langinfo(CODESET);
+    
+    /* reset the LC_CTYPE locale to "C", so ctype works for ASCII as it should */
+    setlocale(LC_CTYPE, "C");
+    if (encoding){
+	    j=0;
+	    for(i=0;i<128 && encoding[i];i++){
+		    if (i==3 && buf[0]=='i' && buf[1]=='s' && buf[2]=='o' 
+			&& encoding[i]=='-') continue;
+		    buf[j++]=tolower(encoding[i]);
 	    }
-	}
+	    buf[j]=0;
+	    encoding=buf;
     }
+    
     if (encoding == NULL) {
 	encoding = "iso8859-1";
     }
+    r=Tcl_SetSystemEncoding(NULL, encoding);
 
-    Tcl_SetSystemEncoding(NULL, encoding);
+    if (r != TCL_OK){
+        Tcl_SetSystemEncoding(NULL, "iso8859-1");
+    }
 
-    resetPath:
     /*
      * Initialize the C library's locale subsystem.  This is required
      * for input methods to work properly on X11.  We only do this for
@@ -461,7 +427,7 @@
      */
 
     setlocale(LC_CTYPE, "");
-
+ 
     /*
      * In case the initial locale is not "C", ensure that the numeric
      * processing is done in "C" locale regardless.  This is needed because
